// This is your Prisma Schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum status {
  ACTIVED
  DISACTIVED
  DELETED
}

enum transactionType {
  EGRESS
  INCOME
}

model roles {
  id           BigInt       @id @default(autoincrement())
  name         String       @db.VarChar(100)
  permmissions permissions?
  status       status       @default(ACTIVED)
  user         users[]
}

model permissions {
  id               BigInt  @id @default(autoincrement())
  role             roles   @relation(fields: [rolesId], references: [id])
  rolesId          BigInt  @unique
  canAccessReports Boolean @default(false)
  canModifyUsers   Boolean @default(false)
}

model users {
  id              String         @id @default(cuid())
  name            String         @db.VarChar(100)
  lastname        String         @db.VarChar(100)
  email           String         @unique @db.VarChar(100)
  password        String         @db.VarChar(255)
  phone           String         @db.VarChar(16)
  role            roles          @relation(fields: [roleId], references: [id])
  roleId          BigInt
  transactionList transactions[]

  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model transactions {
  id      BigInt          @id @default(autoincrement())
  date    DateTime        @default(now())
  amount  Decimal         @default(0.0) @db.Decimal(11, 2)
  concept String          @db.VarChar(300)
  type    transactionType
  userId  String
  user    users           @relation(fields: [userId], references: [id])
}
